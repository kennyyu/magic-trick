{"version":3,"sources":["App.js","index.js"],"names":["getCards","suits","cards","rank","suit","push","deck","counter","length","i","Math","floor","random","t","shuffle","slice","selectCardPile","pile","newCards","middleCard","selectedPileCard","temp","dealCards","piles","concat","MagicCardApp","props","state","stage","this","setState","nextStage","getNextStage","Container","fixed","Grid","container","spacing","item","xs","onClick","setNextState","className","Typography","variant","getInstructions","value","Button","color","restartTrick","bind","React","Component","CardTile","MagicCardPile","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ce2a6ec.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n// Fisher-Yates Shuffle\nfunction shuffle(deck) {\n  let counter = deck.length;\n  while (counter) {\n    const i = Math.floor(Math.random() * counter-- );\n    const t = deck[counter];\n    deck[counter] = deck[i];\n    deck[i] = t;\n  }\n}\n\nfunction getCards() {\n  const ranks = [\n    'A',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    'J',\n    'Q',\n    'K'\n  ];\n  const suits = [\"♠︎\", \"♥︎\", \"♣︎\", \"♦︎\"];\n  let cards = [];\n  for (const rank of ranks) {\n    for (const suit of suits) {\n      cards.push({\n        rank: rank,\n        suit: suit,\n      });\n    }\n  }\n  shuffle(cards);\n  return cards.slice(0, 21);\n}\n\nfunction selectCardPile(cards, pile) {\n  let newCards = cards.slice(0);\n  // Move the selected pile into the middle of the deck\n  for (let i = 0; i < 7; i++) {\n    const middleCard = 7 + i;\n    const selectedPileCard = pile * 7 + i;\n    const temp = newCards[middleCard];\n    newCards[middleCard] = newCards[selectedPileCard];\n    newCards[selectedPileCard] = temp;\n  }\n  return newCards;\n}\n\nfunction dealCards(cards) {\n  // deal out the cards to each pile, alternating piles\n  let piles = [[], [], []];\n  for (let i = 0; i < cards.length; i++) {\n    const pile = i % 3;\n    piles[pile].push(cards[i]);\n  }\n  return [].concat(piles[0]).concat(piles[1]).concat(piles[2]);\n}\n\nclass MagicCardApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: getCards(),\n      stage: \"select_pile_1\",\n    };\n  }\n\n  restartTrick() {\n    this.setState({\n      cards: getCards(),\n      stage: \"select_pile_1\",\n    });\n  }\n\n  getNextStage() {\n    switch (this.state.stage) {\n      case \"select_pile_1\":\n        return \"select_pile_2\";\n      case \"select_pile_2\":\n        return \"select_pile_3\";\n      case \"select_pile_3\":\n        return \"reveal\";\n      case \"reveal\":\n        return \"reveal\";\n      default:\n        return \"\";\n    }\n  }\n\n  getInstructions() {\n    switch (this.state.stage) {\n      case \"select_pile_1\":\n        return \"Please select the pile containing your card (3 more times)\";\n      case \"select_pile_2\":\n        return \"Please select the pile containing your card (2 more times)\";\n      case \"select_pile_3\":\n        return \"Please select the pile containing your card (last time!)\";\n      case \"reveal\":\n        return \"Is this your card?\";\n      default:\n        return \"\";\n    }\n  }\n\n  setNextState(pile) {\n    const nextStage = this.getNextStage();\n    switch (this.state.stage) {\n      case \"select_pile_1\":\n      case \"select_pile_2\":\n      case \"select_pile_3\": {\n        this.setState({\n          cards: dealCards(selectCardPile(this.state.cards, pile)),\n          stage: nextStage,\n        });\n        break;\n      }\n      case \"reveal\":\n        // do nothing\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <Container fixed>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <MagicCardPile\n              cards={this.state.cards.slice(0, 7)}\n              onClick={() => { this.setNextState(0); }}\n              stage={this.state.stage}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <MagicCardPile\n              cards={this.state.cards.slice(7, 14)}\n              onClick={() => { this.setNextState(1); }}\n              stage={this.state.stage}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <MagicCardPile\n              cards={this.state.cards.slice(14, 21)}\n              onClick={() => { this.setNextState(2); }}\n              stage={this.state.stage}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <center>\n              <div className=\"instructions\">\n                <Typography variant=\"subtitle2\">\n                  {this.getInstructions()}\n                </Typography>\n                {this.state.stage === \"reveal\"\n                  ? <CardTile\n                      value={this.state.cards[10].rank}\n                      suit={this.state.cards[10].suit}\n                    />\n                  : null\n                }\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.restartTrick.bind(this)}\n                >\n                  Restart Magic Trick\n                </Button>\n              </div>\n            </center>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  }\n};\n\n// From: https://codepen.io/ursooperduper/pen/EXWxdW\nconst CardTile = (props) => {\n  if (props.suit === \"♣︎\" || props.suit === \"♠︎\") {\n    return (\n      <div className=\"card card-black\">\n        <div className=\"card-tl\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n        <div className=\"card-br\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"card card-red\">\n        <div className=\"card-tl\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n        <div className=\"card-br\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n      </div>\n    );\n  }\n};\n\nclass MagicCardPile extends React.Component {\n  render() {\n    return (\n      <Grid container spacing={0}>\n        {this.props.cards.map(item => (\n          <Grid item xs={12} key={item.rank + \"-\" + item.suit}>\n            <center>\n              <CardTile value={item.rank} suit={item.suit} />\n            </center>\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <center>\n            {this.props.stage !== \"reveal\"\n              ? <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.props.onClick}\n                >\n                  My card is in this pile\n                </Button>\n              : null\n            }\n          </center>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default MagicCardApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MagicCardApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MagicCardApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}