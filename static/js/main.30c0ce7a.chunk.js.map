{"version":3,"sources":["App.js","index.js"],"names":["getCards","suits","cards","rank","suit","push","deck","counter","length","i","Math","floor","random","t","shuffle","slice","MagicCardApp","props","state","stage","chosen","this","setState","pile","newCards","middleCard","selectedPileCard","temp","piles","concat","nextStage","getNextStage","doDealCards","doSelectPile","Container","fixed","Grid","container","spacing","item","xs","onClick","setNextState","className","Typography","variant","getInstructions","value","Button","color","restartTrick","bind","React","Component","CardTile","MagicCardPile","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30c0ce7a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n// Fisher-Yates Shuffle\nfunction shuffle(deck) {\n  let counter = deck.length;\n  while (counter) {\n    const i = Math.floor(Math.random() * counter-- );\n    const t = deck[counter];\n    deck[counter] = deck[i];\n    deck[i] = t;\n  }\n}\n\nfunction getCards() {\n  const ranks = [\n    'A',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    'J',\n    'Q',\n    'K'\n  ];\n  const suits = [\"♠︎\", \"♥︎\", \"♣︎\", \"♦︎\"];\n  let cards = [];\n  for (const rank of ranks) {\n    for (const suit of suits) {\n      cards.push({\n        rank: rank,\n        suit: suit,\n      });\n    }\n  }\n  shuffle(cards);\n  return cards.slice(0, 21);\n}\n\nclass MagicCardApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: getCards(),\n      stage: \"select_pile_1\",\n      chosen: null,\n    };\n  }\n\n  restartTrick() {\n    this.setState({\n      cards: getCards(),\n      stage: \"select_pile_1\",\n    });\n  }\n\n  getNextStage() {\n    switch (this.state.stage) {\n      case \"select_pile_1\":\n        return \"select_pile_2\";\n      case \"select_pile_2\":\n        return \"select_pile_3\";\n      case \"select_pile_3\":\n        return \"reveal\";\n      case \"reveal\":\n        return \"reveal\";\n    }\n  }\n\n  getInstructions() {\n    switch (this.state.stage) {\n      case \"select_pile_1\":\n        return \"Please select the pile containing your card (3 more times)\";\n      case \"select_pile_2\":\n        return \"Please select the pile containing your card (2 more times)\";\n      case \"select_pile_3\":\n        return \"Please select the pile containing your card (last time!)\";\n      case \"reveal\":\n        return \"Your card is:\";\n    }\n  }\n\n  doSelectPile(cards, pile) {\n    let newCards = cards.slice(0);\n    // Move the selected pile into the middle of the deck\n    for (let i = 0; i < 7; i++) {\n      const middleCard = 7 + i;\n      const selectedPileCard = pile * 7 + i;\n      const temp = newCards[middleCard];\n      newCards[middleCard] = newCards[selectedPileCard];\n      newCards[selectedPileCard] = temp;\n    }\n    return newCards;\n  }\n\n  doDealCards(cards) {\n    // deal out the cards to each pile, alternating piles\n    let piles = [[], [], []];\n    for (let i = 0; i < cards.length; i++) {\n      const pile = i % 3;\n      piles[pile].push(cards[i]);\n    }\n    return [].concat(piles[0]).concat(piles[1]).concat(piles[2]);\n  }\n\n  setNextState(pile) {\n    const nextStage = this.getNextStage();\n    switch (this.state.stage) {\n      case \"select_pile_1\":\n      case \"select_pile_2\": {\n        const cards = this.doDealCards(\n          this.doSelectPile(this.state.cards, pile)\n        );\n        this.setState({\n          cards: cards,\n          stage: nextStage,\n        });\n        break;\n      }\n      case \"select_pile_3\": {\n        // Don't deal out the cards again after the last select\n        const cards = this.doSelectPile(this.state.cards, pile);\n        this.setState({\n          chosen: cards[10],\n          stage: nextStage,\n        });\n        break;\n      }\n      case \"reveal\":\n        // do nothing\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <Container fixed>\n        <Grid container spacing={3}>\n          <Grid item xs={3}>\n            <MagicCardPile\n              cards={this.state.cards.slice(0, 7)}\n              onClick={() => { this.setNextState(0); }}\n              stage={this.state.stage}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <MagicCardPile\n              cards={this.state.cards.slice(7, 14)}\n              onClick={() => { this.setNextState(1); }}\n              stage={this.state.stage}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <MagicCardPile\n              cards={this.state.cards.slice(14, 21)}\n              onClick={() => { this.setNextState(2); }}\n              stage={this.state.stage}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <center>\n              <div className=\"instructions\">\n                <Typography variant=\"subtitle2\">\n                  {this.getInstructions()}\n                </Typography>\n                {this.state.stage === \"reveal\"\n                  ? <CardTile\n                      value={this.state.chosen.rank}\n                      suit={this.state.chosen.suit}\n                    />\n                  : null\n                }\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.restartTrick.bind(this)}\n                >\n                  Restart Magic Trick\n                </Button>\n              </div>\n            </center>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  }\n};\n\nconst CardTile = (props) => {\n  if (props.suit === \"♣︎\" || props.suit === \"♠︎\") {\n    return (\n      <div className=\"card card-black\">\n        <div className=\"card-tl\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n        <div className=\"card-br\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"card card-red\">\n        <div className=\"card-tl\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n        <div className=\"card-br\">\n          <div className=\"card-value\">{props.value}</div>\n          <div className=\"card-suit\">{props.suit}</div>\n        </div>\n      </div>\n    );\n  }\n};\n\nclass MagicCardPile extends React.Component {\n  render() {\n    return (\n      <Grid container spacing={0}>\n        {this.props.cards.map(item => (\n          <Grid item xs={12} key={item.rank + \"-\" + item.suit}>\n            <center>\n              <CardTile value={item.rank} suit={item.suit} />\n            </center>\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <center>\n            {this.props.stage !== \"reveal\"\n              ? <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={this.props.onClick}\n                >\n                  My card is in this pile\n                </Button>\n              : null\n            }\n          </center>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default MagicCardApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MagicCardApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MagicCardApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}